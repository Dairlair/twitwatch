---
# See https://goswagger.io/tutorial/custom-server.html
# See https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/swagger.yml
# See https://mean-dev.info/authentication-rest-api-swagger/
# See https://habr.com/ru/company/lamoda/blog/463301/
swagger: '2.0'
info:
  version: '0.0.1'
  title: Tweetwatch Server  
consumes:
  - application/json
produces:
  - application/json
paths:
  /signup:
    post:
      operationId: signup
      security: []
      parameters:
        - name: user
          in: body
          description: New User
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        "200":
          description: User created
          schema:
            $ref: "#/definitions/User"
        "422":
          description: Email already taken
          schema:
            $ref: "#/definitions/DefaultError"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
  /login:
    post:
      operationId: login
      security: []
      parameters:
        - name: user
          in: body
          description: New User
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        "200":
          description: Logged in successfully
          schema:
            $ref: "#/definitions/User"
        "422":
          description: Invalid credentials
          schema:
            $ref: "#/definitions/DefaultError"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
  /topics:
    post:
      operationId: createTopic
      parameters:
        - name: topic
          in: body
          description: New Topic
          required: true
          schema:
            $ref: '#/definitions/CreateTopic'
      responses:
        "200":
          description: Topic created
          schema:
            $ref: "#/definitions/Topic"
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
    get:
      operationId: getUserTopics
      responses:
        "200":
          description: Returns topics list of current user
          schema:
            type: array
            items:
              $ref: "#/definitions/Topic"
  /topics/{topicId}:
    put:
      summary: Update desired topic by Topic ID
      operationId: updateTopic
      parameters:
        - in: path
          name: topicId
          type: integer
          required: true
          description: Numeric ID of the topic to update
        - name: topic
          in: body
          description: Updated topic data
          required: true
          schema:
            $ref: '#/definitions/CreateTopic'
      responses:
        "200":
          description: Topic updated
          schema:
            $ref: "#/definitions/Topic"
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
  /topics/{topicId}/streams:
    post:
      operationId: createStream
      parameters:
        - in: path
          name: topicId
          type: integer
          required: true
          description: Numeric ID of the topic to create stream
        - in: body
          name: stream
          required: true
          description: Stream to create
          schema:
            $ref: '#/definitions/CreateStream'
      responses:
        "200":
          description: Stream created
          schema:
            $ref: "#/definitions/Stream"
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
    get:
      summary: Returns list of streams inside the topic
      operationId: getStreams
      parameters:
        - in: path
          name: topicId
          type: integer
          required: true
      responses:
        "200":
          description: Streams list
          schema:
            type: array
            items:
              $ref: "#/definitions/Stream"
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
  /topics/{topicId}/streams/{streamId}:
    put:
      summary: Update desired stream by Topic ID and Stream ID
      operationId: updateStream
      parameters:
        - in: path
          name: topicId
          type: integer
          required: true
          description: Numeric ID of the topic to update
        - in: path
          name: streamId
          type: integer
          required: true
          description: Numeric ID of the stream to update
        - name: stream
          in: body
          description: Updated stream data
          required: true
          schema:
            $ref: '#/definitions/CreateStream'
      responses:
        "200":
          description: Stream updated
          schema:
            $ref: "#/definitions/Stream"
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
    delete:
      summary: Delete desired stream by Topic ID and Stream ID
      operationId: deleteStream
      parameters:
        - in: path
          name: topicId
          type: integer
          required: true
          description: Numeric ID of the topic to update
        - in: path
          name: streamId
          type: integer
          required: true
          description: Numeric ID of the stream to update
      responses:
        "200":
          description: Stream deleted
          schema:
            $ref: "#/definitions/DefaultSuccess"
        default:
          description: Error
          schema:
            $ref: "#/definitions/DefaultError"
definitions:
  User:
    properties:
      id:
        type: integer
      email:
        type: string
      token:
        type: string
    required:
      - id
      - email
      - token
  Credentials:
    properties:
      email:
        type: string
      password:
        type: string
        format: password
    required:
      - email
      - password
  CreateTopic:
    properties:
      name:
        type: string
      tracks:
        type: array
        items:
          type: string
      isActive:
        type: boolean
    required:
      - name
      - tracks
      - isActive
  Topic:
    properties:
      id:
        type: integer
      name:
        type: string
      tracks:
        type: array
        items:
          type: string
      createdAt:
        type: string
      isActive:
        type: boolean
    required:
      - id
      - name
      - tracks
      - createdAt
      - isActive
  CreateStream:
    properties:
      track:
        type: string
    required:
      - track
  Stream:
    properties:
      id:
        type: integer
      track:
        type: string
      createdAt:
        type: string
    required:
      - id
      - track
      - createdAt
  DefaultSuccess:
    properties:
      message:
        type: string
    required:
      - message
  DefaultError:
    properties:
      message:
        type: string
    required:
      - message
# Default Security requirements for all operations
security:
  - JWT: []
securityDefinitions:
  isRegistered:
    # This scheme uses the header: "Authorization: Basic {base64 encoded string defined by username:password}"
    # Scopes are not supported with this type of authorization.
    type: basic
  JWT:
    type: apiKey
    name: Authorization
    in: header