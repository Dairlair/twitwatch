---
# See https://goswagger.io/tutorial/custom-server.html
# See https://github.com/go-swagger/go-swagger/blob/master/examples/composed-auth/swagger.yml
# See https://mean-dev.info/authentication-rest-api-swagger/
# See https://habr.com/ru/company/lamoda/blog/463301/
swagger: '2.0'
info:
  version: '0.0.1'
  title: Tweetwatch Server  
consumes:
  - application/json
produces:
  - application/json
paths:
  /signup:
    post:
      operationId: signup
      parameters:
        - name: user
          in: body
          description: New User
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: User created
          schema:
            $ref: "#/definitions/GeneralResponse"
        "422":
          description: Email already taken
          schema:
            $ref: "#/definitions/GeneralResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /account:
    get:
      operationId: account
      security:
        - isRegistered: []
      responses:
        "200":
          description: Returns info about current user
          schema:
            $ref: "#/definitions/GeneralResponse"
  /login:
    post:
      operationId: login
      security:
        - isRegistered: []
      responses:
        "200":
          description: Log In
          schema:
            $ref: "#/definitions/Token"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  User:
    properties:
      email:
        type: string
      password:
        type: string
        format: password
    required:
      - email
      - password
  Token:
    properties:
      user:
        type: string
      token:
        type: string
    required:
      - user
      - token
  GeneralResponse:
    properties:
      message:
        type: string
    required:
      - message
  ErrorResponse:
    properties:
      message:
        type: string
    required:
      - message
# Default Security requirements for all operations
security:
  - isRegistered: []
securityDefinitions:
  isRegistered:
    # This scheme uses the header: "Authorization: Basic {base64 encoded string defined by username:password}"
    # Scopes are not supported with this type of authorization.
    type: basic
#  JWT:
#    type: apiKey
#    name: Authorization
#    in: header