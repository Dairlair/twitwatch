// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/dairlair/tweetwatch/pkg/entity"
	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// AddTopic provides a mock function with given fields: _a0
func (_m *Interface) AddTopic(_a0 entity.TopicInterface) (entity.TopicInterface, error) {
	ret := _m.Called(_a0)

	var r0 entity.TopicInterface
	if rf, ok := ret.Get(0).(func(entity.TopicInterface) entity.TopicInterface); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.TopicInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.TopicInterface) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTweetStreams provides a mock function with given fields: tweetStreams
func (_m *Interface) AddTweetStreams(tweetStreams entity.TweetStreamsInterface) (int64, error) {
	ret := _m.Called(tweetStreams)

	var r0 int64
	if rf, ok := ret.Get(0).(func(entity.TweetStreamsInterface) int64); ok {
		r0 = rf(tweetStreams)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.TweetStreamsInterface) error); ok {
		r1 = rf(tweetStreams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreams provides a mock function with given fields:
func (_m *Interface) GetStreams() ([]entity.StreamInterface, error) {
	ret := _m.Called()

	var r0 []entity.StreamInterface
	if rf, ok := ret.Get(0).(func() []entity.StreamInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.StreamInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTopics provides a mock function with given fields: userId
func (_m *Interface) GetUserTopics(userId int64) ([]entity.TopicInterface, error) {
	ret := _m.Called(userId)

	var r0 []entity.TopicInterface
	if rf, ok := ret.Get(0).(func(int64) []entity.TopicInterface); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TopicInterface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *Interface) Login(email string, password string) (*int64, error) {
	ret := _m.Called(email, password)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(string, string) *int64); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: email, password
func (_m *Interface) SignUp(email string, password string) (*int64, error) {
	ret := _m.Called(email, password)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(string, string) *int64); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopic provides a mock function with given fields: _a0
func (_m *Interface) UpdateTopic(_a0 entity.TopicInterface) (entity.TopicInterface, []int64, []entity.StreamInterface, error) {
	ret := _m.Called(_a0)

	var r0 entity.TopicInterface
	if rf, ok := ret.Get(0).(func(entity.TopicInterface) entity.TopicInterface); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(entity.TopicInterface)
		}
	}

	var r1 []int64
	if rf, ok := ret.Get(1).(func(entity.TopicInterface) []int64); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int64)
		}
	}

	var r2 []entity.StreamInterface
	if rf, ok := ret.Get(2).(func(entity.TopicInterface) []entity.StreamInterface); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]entity.StreamInterface)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(entity.TopicInterface) error); ok {
		r3 = rf(_a0)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
