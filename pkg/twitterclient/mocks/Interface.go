// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/dairlair/tweetwatch/pkg/entity"
	mock "github.com/stretchr/testify/mock"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// AddStream provides a mock function with given fields: _a0
func (_m *Interface) AddStream(_a0 entity.StreamInterface) {
	_m.Called(_a0)
}

// GetStreams provides a mock function with given fields:
func (_m *Interface) GetStreams() map[int64]entity.StreamInterface {
	ret := _m.Called()

	var r0 map[int64]entity.StreamInterface
	if rf, ok := ret.Get(0).(func() map[int64]entity.StreamInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]entity.StreamInterface)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Interface) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unwatch provides a mock function with given fields:
func (_m *Interface) Unwatch() {
	_m.Called()
}

// Watch provides a mock function with given fields: _a0
func (_m *Interface) Watch(_a0 chan entity.TweetStreamsInterface) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(chan entity.TweetStreamsInterface) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
