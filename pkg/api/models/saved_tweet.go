// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SavedTweet saved tweet
// swagger:model SavedTweet
type SavedTweet struct {
	Tweet

	// streams
	Streams []*Stream `json:"streams"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SavedTweet) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Tweet
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Tweet = aO0

	// now for regular properties
	var propsSavedTweet struct {
		Streams []*Stream `json:"streams"`
	}
	if err := swag.ReadJSON(raw, &propsSavedTweet); err != nil {
		return err
	}
	m.Streams = propsSavedTweet.Streams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SavedTweet) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.Tweet)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsSavedTweet struct {
		Streams []*Stream `json:"streams"`
	}
	propsSavedTweet.Streams = m.Streams

	jsonDataPropsSavedTweet, errSavedTweet := swag.WriteJSON(propsSavedTweet)
	if errSavedTweet != nil {
		return nil, errSavedTweet
	}
	_parts = append(_parts, jsonDataPropsSavedTweet)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this saved tweet
func (m *SavedTweet) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Tweet
	if err := m.Tweet.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SavedTweet) validateStreams(formats strfmt.Registry) error {

	if swag.IsZero(m.Streams) { // not required
		return nil
	}

	for i := 0; i < len(m.Streams); i++ {
		if swag.IsZero(m.Streams[i]) { // not required
			continue
		}

		if m.Streams[i] != nil {
			if err := m.Streams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("streams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SavedTweet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SavedTweet) UnmarshalBinary(b []byte) error {
	var res SavedTweet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
