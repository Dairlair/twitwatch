// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/dairlair/tweetwatch/pkg/api/models"
)

// UpdateStreamOKCode is the HTTP code returned for type UpdateStreamOK
const UpdateStreamOKCode int = 200

/*UpdateStreamOK Stream updated

swagger:response updateStreamOK
*/
type UpdateStreamOK struct {

	/*
	  In: Body
	*/
	Payload *models.Stream `json:"body,omitempty"`
}

// NewUpdateStreamOK creates UpdateStreamOK with default headers values
func NewUpdateStreamOK() *UpdateStreamOK {

	return &UpdateStreamOK{}
}

// WithPayload adds the payload to the update stream o k response
func (o *UpdateStreamOK) WithPayload(payload *models.Stream) *UpdateStreamOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update stream o k response
func (o *UpdateStreamOK) SetPayload(payload *models.Stream) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateStreamOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateStreamDefault Error

swagger:response updateStreamDefault
*/
type UpdateStreamDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.DefaultError `json:"body,omitempty"`
}

// NewUpdateStreamDefault creates UpdateStreamDefault with default headers values
func NewUpdateStreamDefault(code int) *UpdateStreamDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateStreamDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update stream default response
func (o *UpdateStreamDefault) WithStatusCode(code int) *UpdateStreamDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update stream default response
func (o *UpdateStreamDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update stream default response
func (o *UpdateStreamDefault) WithPayload(payload *models.DefaultError) *UpdateStreamDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update stream default response
func (o *UpdateStreamDefault) SetPayload(payload *models.DefaultError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateStreamDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
