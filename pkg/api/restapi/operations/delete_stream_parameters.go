// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteStreamParams creates a new DeleteStreamParams object
// no default values defined in spec.
func NewDeleteStreamParams() DeleteStreamParams {

	return DeleteStreamParams{}
}

// DeleteStreamParams contains all the bound params for the delete stream operation
// typically these are obtained from a http.Request
//
// swagger:parameters deleteStream
type DeleteStreamParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Numeric ID of the stream to update
	  Required: true
	  In: path
	*/
	StreamID int64
	/*Numeric ID of the topic to update
	  Required: true
	  In: path
	*/
	TopicID int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteStreamParams() beforehand.
func (o *DeleteStreamParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rStreamID, rhkStreamID, _ := route.Params.GetOK("streamId")
	if err := o.bindStreamID(rStreamID, rhkStreamID, route.Formats); err != nil {
		res = append(res, err)
	}

	rTopicID, rhkTopicID, _ := route.Params.GetOK("topicId")
	if err := o.bindTopicID(rTopicID, rhkTopicID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindStreamID binds and validates parameter StreamID from path.
func (o *DeleteStreamParams) bindStreamID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("streamId", "path", "int64", raw)
	}
	o.StreamID = value

	return nil
}

// bindTopicID binds and validates parameter TopicID from path.
func (o *DeleteStreamParams) bindTopicID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("topicId", "path", "int64", raw)
	}
	o.TopicID = value

	return nil
}
