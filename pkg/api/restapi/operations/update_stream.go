// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/dairlair/tweetwatch/pkg/api/models"
)

// UpdateStreamHandlerFunc turns a function with the right signature into a update stream handler
type UpdateStreamHandlerFunc func(UpdateStreamParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateStreamHandlerFunc) Handle(params UpdateStreamParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// UpdateStreamHandler interface for that can handle valid update stream params
type UpdateStreamHandler interface {
	Handle(UpdateStreamParams, *models.User) middleware.Responder
}

// NewUpdateStream creates a new http.Handler for the update stream operation
func NewUpdateStream(ctx *middleware.Context, handler UpdateStreamHandler) *UpdateStream {
	return &UpdateStream{Context: ctx, Handler: handler}
}

/*UpdateStream swagger:route PUT /topics/{topicId}/streams/{streamId} updateStream

Update desired stream by Topic ID and Stream ID

*/
type UpdateStream struct {
	Context *middleware.Context
	Handler UpdateStreamHandler
}

func (o *UpdateStream) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateStreamParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
