// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	models "github.com/dairlair/tweetwatch/pkg/api/models"
)

// UpdateTopicHandlerFunc turns a function with the right signature into a update topic handler
type UpdateTopicHandlerFunc func(UpdateTopicParams, *models.UserResponse) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateTopicHandlerFunc) Handle(params UpdateTopicParams, principal *models.UserResponse) middleware.Responder {
	return fn(params, principal)
}

// UpdateTopicHandler interface for that can handle valid update topic params
type UpdateTopicHandler interface {
	Handle(UpdateTopicParams, *models.UserResponse) middleware.Responder
}

// NewUpdateTopic creates a new http.Handler for the update topic operation
func NewUpdateTopic(ctx *middleware.Context, handler UpdateTopicHandler) *UpdateTopic {
	return &UpdateTopic{Context: ctx, Handler: handler}
}

/*UpdateTopic swagger:route PUT /topics/{topicId} updateTopic

Update desired topic by Topic ID

*/
type UpdateTopic struct {
	Context *middleware.Context
	Handler UpdateTopicHandler
}

func (o *UpdateTopic) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateTopicParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.UserResponse
	if uprinc != nil {
		principal = uprinc.(*models.UserResponse) // this is really a models.UserResponse, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
