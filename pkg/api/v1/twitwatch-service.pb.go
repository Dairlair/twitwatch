// Code generated by protoc-gen-go. DO NOT EDIT.
// source: twitwatch-service.proto

package v1

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// https://medium.com/@amsokol.com/tutorial-how-to-develop-go-grpc-microservice-with-http-rest-endpoint-middleware-kubernetes-daebb36a97e9
//
// Stream we have to watch (track)
type Stream struct {
	// Unique integer identifier of the watched stream
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Keywords to track. For more information see https://developer.twitter.com/en/docs/tweets/filter-realtime/api-reference/post-statuses-filter.html
	Track                string   `protobuf:"bytes,2,opt,name=track,proto3" json:"track,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_205c390a0d5eed40, []int{0}
}

func (m *Stream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stream.Unmarshal(m, b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return xxx_messageInfo_Stream.Size(m)
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Stream) GetTrack() string {
	if m != nil {
		return m.Track
	}
	return ""
}

// Request data to create new stream
type CreateStreamRequest struct {
	// API Major version
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Stream entity to add
	Stream               *Stream  `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamRequest) Reset()         { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()    {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_205c390a0d5eed40, []int{1}
}

func (m *CreateStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateStreamRequest.Unmarshal(m, b)
}
func (m *CreateStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateStreamRequest.Marshal(b, m, deterministic)
}
func (m *CreateStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamRequest.Merge(m, src)
}
func (m *CreateStreamRequest) XXX_Size() int {
	return xxx_messageInfo_CreateStreamRequest.Size(m)
}
func (m *CreateStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamRequest proto.InternalMessageInfo

func (m *CreateStreamRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateStreamRequest) GetStream() *Stream {
	if m != nil {
		return m.Stream
	}
	return nil
}

// Response that contains data for created stream
type CreateStreamResponse struct {
	// API Major version
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// ID of created stream
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateStreamResponse) Reset()         { *m = CreateStreamResponse{} }
func (m *CreateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*CreateStreamResponse) ProtoMessage()    {}
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_205c390a0d5eed40, []int{2}
}

func (m *CreateStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateStreamResponse.Unmarshal(m, b)
}
func (m *CreateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateStreamResponse.Marshal(b, m, deterministic)
}
func (m *CreateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateStreamResponse.Merge(m, src)
}
func (m *CreateStreamResponse) XXX_Size() int {
	return xxx_messageInfo_CreateStreamResponse.Size(m)
}
func (m *CreateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateStreamResponse proto.InternalMessageInfo

func (m *CreateStreamResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateStreamResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Stream)(nil), "v1.Stream")
	proto.RegisterType((*CreateStreamRequest)(nil), "v1.CreateStreamRequest")
	proto.RegisterType((*CreateStreamResponse)(nil), "v1.CreateStreamResponse")
}

func init() { proto.RegisterFile("twitwatch-service.proto", fileDescriptor_205c390a0d5eed40) }

var fileDescriptor_205c390a0d5eed40 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x29, 0xcf, 0x2c,
	0x29, 0x4f, 0x2c, 0x49, 0xce, 0xd0, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x33, 0x54, 0xd2, 0xe3, 0x62, 0x0b, 0x2e, 0x29, 0x4a, 0x4d,
	0xcc, 0x15, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x62, 0xca,
	0x4c, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0x29, 0x4a, 0x4c, 0xce, 0x96, 0x60, 0x52, 0x60, 0xd4, 0xe0,
	0x0c, 0x82, 0x70, 0x94, 0xbc, 0xb9, 0x84, 0x9d, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x21, 0xba, 0x82,
	0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x13, 0x0b, 0x32, 0xc1, 0xba, 0x39,
	0x83, 0x40, 0x4c, 0x21, 0x25, 0x2e, 0xb6, 0x62, 0xb0, 0x12, 0xb0, 0x7e, 0x6e, 0x23, 0x2e, 0xbd,
	0x32, 0x43, 0x3d, 0xa8, 0x26, 0xa8, 0x8c, 0x92, 0x05, 0x97, 0x08, 0xaa, 0x61, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x58, 0x4c, 0x83, 0x38, 0x8e, 0x09, 0xe6, 0x38, 0xa3, 0x50, 0x2e, 0x81, 0x10,
	0x98, 0xaf, 0x82, 0x21, 0x9e, 0x12, 0x72, 0xe4, 0xe2, 0x41, 0x36, 0x4d, 0x48, 0x1c, 0x64, 0x23,
	0x16, 0xc7, 0x4a, 0x49, 0x60, 0x4a, 0x40, 0x2c, 0x4e, 0x62, 0x03, 0x07, 0x8c, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x45, 0xb5, 0x47, 0xc5, 0x33, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TwitwatchServiceClient is the client API for TwitwatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TwitwatchServiceClient interface {
	// Create new stream to watch it
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
}

type twitwatchServiceClient struct {
	cc *grpc.ClientConn
}

func NewTwitwatchServiceClient(cc *grpc.ClientConn) TwitwatchServiceClient {
	return &twitwatchServiceClient{cc}
}

func (c *twitwatchServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, "/v1.TwitwatchService/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitwatchServiceServer is the server API for TwitwatchService service.
type TwitwatchServiceServer interface {
	// Create new stream to watch it
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
}

func RegisterTwitwatchServiceServer(s *grpc.Server, srv TwitwatchServiceServer) {
	s.RegisterService(&_TwitwatchService_serviceDesc, srv)
}

func _TwitwatchService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitwatchServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TwitwatchService/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitwatchServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TwitwatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TwitwatchService",
	HandlerType: (*TwitwatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _TwitwatchService_CreateStream_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitwatch-service.proto",
}
