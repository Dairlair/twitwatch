# use the latest ubuntu environment (18.04) available on travis
dist: xenial

language: go

# Force-enable Go modules. Also force go to use the code in vendor/
# These will both be unnecessary when Go 1.13 lands.
env:
  - GO111MODULE=on
  # Temporary disabled
  - GOFLAGS='-mod vendor'

# We don't need to test on very old versions of the Go compiler. It's the user's
# responsibility to keep their compiler up to date.
go:
  - 1.12.4
  - 1.12.7

env:
  TWITWATCH_TEST_POSTGRES_DSN="postgres://postgres@127.0.0.1:5432/twitwatch"
  # These environment variables must be available during tests running:
  # TWITWATCH_TEST_TWITTER_CONSUMER_KEY
  # TWITWATCH_TEST_TWITTER_CONSUMER_SECRET
  # TWITWATCH_TEST_TWITTER_ACCESS_TOKEN
  # TWITWATCH_TEST_TWITTER_ACCESS_SECRET

# Only clone the most recent commit.
git:
  depth: 1

# Skip the install step. Don't `go get` dependencies. Only build with the code
# in vendor/
install: true

# Don't email me the results of the test runs.
notifications:
  email: false

services:
  - postgresql

# Anything in before_script that returns a nonzero exit code will flunk the
# build and immediately stop. It's sorta like having set -e enabled in bash.
# Make sure golangci-lint is vendored.
before_script:
  - pwd
  - ls -la
  - go list ./...
  - psql -c 'create database twitwatch;' -U postgres
  - ./tools/migrate.linux-amd64 -source file:schema/postgres -database "$TWITWATCH_TEST_POSTGRES_DSN" up

# script always runs to completion (set +e). If we have linter issues AND a
# failing test, we want to see both. Configure golangci-lint with a
# .golangci.yml file at the top level of your repo.
# script:
#  - go test -v -race ./...  # Run all the tests with the race detector enabled